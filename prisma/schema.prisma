generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  memberId     Int               @id @default(autoincrement())
  userId       String            @unique
  userPassword String
  role         Role              @default(STUDENT)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt @default(now())

  student      Student?          @relation("UserToStudent")
  admin        Admin?            @relation("UserToAdmin")
  qnaComments  QnABoardComment[] @relation("UserInQnAComment")
}

model Admin {
  adminName    String
  adminPhone   String         @unique
  adminPosition String         @default("조교")
  adminMemo     String?
  announcements Announcement[] @relation("AdminToAnnouncements")
  academies      Academy[]      @relation("AdminToAcademy")

  memberId     Int            @id
  user         User           @relation("UserToAdmin", fields: [memberId], references: [memberId], onDelete: Cascade, onUpdate: NoAction)
}

model Student {
  academyId         Int
  studentName       String
  studentPhone      String  @unique
  studentHighschool String?
  studentBirthYear  Int
  studentMemo       String?
  qnas              QnABoard[]        @relation("StudentToQnA")

  memberId          Int     @id
  user              User    @relation("UserToStudent", fields: [memberId], references: [memberId], onDelete: Cascade, onUpdate: NoAction)
  academy           Academy @relation("AcademyToStudents", fields: [academyId], references: [academyId])

  @@index([academyId], map: "Student_academyId_fkey")
}

model File {
  fileId        Int      @id @default(autoincrement())
  fileName      String
  originalName  String
  fileUrl       String
  fileType      String
  fileSize      Int?
  createdAt     DateTime @default(now())

  // 중간 테이블들을 통한 관계
  academyFiles     AcademyFile[]
  qnaFiles         QnaFile[]
  announcementFiles AnnouncementFile[]

  @@index([fileId])
}

model Academy {
  academyId        Int            @id @default(autoincrement())
  academyName      String         @unique
  academyPhone     String         @unique
  academyAddress   String

  academyStudents  Student[]      @relation("AcademyToStudents")
  academyAdmins    Admin[]        @relation("AdminToAcademy")
  academyAnnouncements Announcement[] @relation("AnnouncementToAcademy")
  academyFiles     AcademyFile[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt @default(now())
}

model AcademyFile {
  academyId Int
  fileId    Int

  academy   Academy @relation(fields: [academyId], references: [academyId], onDelete: Cascade)
  file      File    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@id([academyId, fileId])
  @@index([academyId])
  @@index([fileId])
}


model Announcement {
  announcementId        Int                @id @default(autoincrement())
  announcementTitle                 String       @default("")
  announcementContent               String       @default("")
  isItAssetAnnouncement Boolean            @default(false)
  isItImportantAnnouncement Boolean            @default(false)
  announcementFiles     AnnouncementFile[]
  academies             Academy[]          @relation("AnnouncementToAcademy")
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  authorId              Int?
  author                Admin?             @relation("AdminToAnnouncements", fields: [authorId], references: [memberId])
  @@index([authorId], map: "Announcement_authorId_fkey")
}

model AnnouncementFile {
  announcementId Int
  fileId        Int @default(0)  //여기 default 나중에 제거할 것

  announcement  Announcement @relation(fields: [announcementId], references: [announcementId], onDelete: Cascade)
  file          File         @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@id([announcementId, fileId])
  @@index([announcementId])
  @@index([fileId])
}


model QnABoard {
  qnaId       Int               @id @default(autoincrement())
  qnaTitle    String
  qnaContent  String            @db.Text
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  qnaUserId   Int               // 기존 API와의 호환성을 위해 유지
  comments    QnABoardComment[] @relation("QnAWithComments")
  qnaFiles    QnaFile[]
  student     Student           @relation("StudentToQnA", fields: [qnaUserId], references: [memberId], onDelete: Cascade, onUpdate: NoAction)

  @@index([qnaUserId], map: "QnABoard_qnaUserId_fkey")
}

model QnaFile {
  qnaId   Int
  fileId  Int

  qna     QnABoard @relation(fields: [qnaId], references: [qnaId], onDelete: Cascade)
  file    File     @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@id([qnaId, fileId])
  @@index([qnaId])
  @@index([fileId])
}

model QnABoardComment {
  commentId      Int      @id @default(autoincrement())
  commentContent String   @db.Text
  commentUserId  Int
  qnaId          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation("UserInQnAComment", fields: [commentUserId], references: [memberId], onDelete: Cascade, onUpdate: NoAction)
  qna            QnABoard @relation("QnAWithComments", fields: [qnaId], references: [qnaId], onDelete: Cascade)

  @@index([commentUserId], map: "QnABoardComment_commentUserId_fkey")
  @@index([qnaId], map: "QnABoardComment_qnaId_fkey")
}

enum Role {
  DEVELOPER
  ADMIN
  STUDENT
}
