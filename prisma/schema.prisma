generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  memberId     Int               @id @default(autoincrement())
  userId       String            @unique
  userPassword String
  role         Role              @default(STUDENT)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt @default(now())

  student      Student?          @relation("UserToStudent")
  admin        Admin?            @relation("UserToAdmin")
}

model Admin {
  adminName    String
  adminPhone   String         @unique
  adminPosition String         @default("조교")
  adminMemo     String?
  announcements Announcement[] @relation("AdminToAnnouncements")
  academies      Academy[]      @relation("AdminToAcademy")
  qnaComments   QnABoardComment[] @relation("AdminToQnAComment")
  counselingSchedules    CounselingSchedule[] @relation("AdminToCounselingSchedule")
  counselingReservations CounselingReservation[] @relation("AdminToCounselingReservation")

  memberId     Int            @id
  user         User           @relation("UserToAdmin", fields: [memberId], references: [memberId], onDelete: Cascade, onUpdate: NoAction)
}

model Student {
  academyId         Int
  studentName       String
  studentPhone      String  @unique
  studentHighschool String?
  studentBirthYear  Int
  studentMemo       String?
  qnas              QnABoard[]        @relation("StudentToQnA")
  qnaComments       QnABoardComment[] @relation("StudentToQnAComment")
  counselingReservations CounselingReservation[] @relation("StudentToCounselingReservation")
  examResults       ExamResult[]      @relation("StudentToExamResult")

  memberId          Int     @id
  user              User    @relation("UserToStudent", fields: [memberId], references: [memberId], onDelete: Cascade, onUpdate: NoAction)
  academy           Academy @relation("AcademyToStudents", fields: [academyId], references: [academyId])

  @@index([academyId], map: "Student_academyId_fkey")
}

model File {
  fileId        Int      @id @default(autoincrement())
  fileName      String
  originalName  String
  fileUrl       String
  fileType      String
  fileSize      Int?
  createdAt     DateTime @default(now())

  // 중간 테이블들을 통한 관계
  academyFiles     AcademyFile[]
  qnaFiles         QnaFile[]
  announcementFiles AnnouncementFile[]

  @@index([fileId])
}

model Academy {
  academyId        Int            @id @default(autoincrement())
  academyName      String         @unique
  academyPhone     String         @unique
  academyAddress   String

  academyStudents  Student[]      @relation("AcademyToStudents")
  academyAdmins    Admin[]        @relation("AdminToAcademy")
  academyAnnouncements Announcement[] @relation("AnnouncementToAcademy")
  academyFiles     AcademyFile[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt @default(now())
}

model AcademyFile {
  academyId Int
  fileId    Int

  academy   Academy @relation(fields: [academyId], references: [academyId], onDelete: Cascade)
  file      File    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@id([academyId, fileId])
  @@index([academyId])
  @@index([fileId])
}

model Announcement {
  announcementId        Int                @id @default(autoincrement())
  announcementTitle                 String       @default("")
  announcementContent               String       @default("")
  isItAssetAnnouncement Boolean            @default(false)
  isItImportantAnnouncement Boolean            @default(false)
  announcementFiles     AnnouncementFile[]
  academies             Academy[]          @relation("AnnouncementToAcademy")
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  authorId              Int?
  author                Admin?             @relation("AdminToAnnouncements", fields: [authorId], references: [memberId])
  @@index([authorId], map: "Announcement_authorId_fkey")
}

model AnnouncementFile {
  announcementId Int
  fileId        Int @default(0)  //여기 default 나중에 제거할 것

  announcement  Announcement @relation(fields: [announcementId], references: [announcementId], onDelete: Cascade)
  file          File         @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@id([announcementId, fileId])
  @@index([announcementId])
  @@index([fileId])
}


model QnABoard {
  qnaId       Int               @id @default(autoincrement())
  qnaTitle    String
  qnaContent  String            @db.Text
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  qnaUserId   Int               // 기존 API와의 호환성을 위해 유지
  isItAnswered Boolean           @default(false)
  comments    QnABoardComment[] @relation("QnAWithComments")
  qnaFiles    QnaFile[]
  student     Student           @relation("StudentToQnA", fields: [qnaUserId], references: [memberId], onDelete: Cascade, onUpdate: NoAction)

  @@index([qnaUserId], map: "QnABoard_qnaUserId_fkey")
}

model QnaFile {
  qnaId   Int
  fileId  Int

  qna     QnABoard @relation(fields: [qnaId], references: [qnaId], onDelete: Cascade)
  file    File     @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@id([qnaId, fileId])
  @@index([qnaId])
  @@index([fileId])
}

model QnABoardComment {
  commentId      Int      @id @default(autoincrement())
  commentContent String   @db.Text
  studentId      Int?
  adminId        Int?
  qnaId          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  student        Student? @relation("StudentToQnAComment", fields: [studentId], references: [memberId], onDelete: Cascade, onUpdate: NoAction)
  admin          Admin?   @relation("AdminToQnAComment", fields: [adminId], references: [memberId], onDelete: Cascade, onUpdate: NoAction)
  qna            QnABoard @relation("QnAWithComments", fields: [qnaId], references: [qnaId], onDelete: Cascade)

  @@index([studentId])
  @@index([adminId])
  @@index([qnaId])
}

model CounselingSchedule {
  scheduleId    Int      @id @default(autoincrement())
  adminId       Int
  date          DateTime // 날짜만 저장 (시간 제외)
  timeSlotId    Int      // config의 TIME_SLOTS에서 관리
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  admin         Admin    @relation("AdminToCounselingSchedule", fields: [adminId], references: [memberId], onDelete: Cascade)
  reservations  CounselingReservation?
  
  @@unique([adminId, date, timeSlotId])
  @@index([adminId])
  @@index([date])
}

model CounselingReservation {
  reservationId   Int      @id @default(autoincrement())
  studentId       Int
  adminId         Int
  scheduleId      Int
  consultationContent String @db.Text
  status          ReservationStatus @default(CONFIRMED)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  student         Student  @relation("StudentToCounselingReservation", fields: [studentId], references: [memberId], onDelete: Cascade)
  admin           Admin    @relation("AdminToCounselingReservation", fields: [adminId], references: [memberId], onDelete: Cascade)
  schedule        CounselingSchedule @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade)
  
  @@unique([scheduleId])
  @@index([studentId])
  @@index([adminId])
  @@index([scheduleId])
}

model Exam {
  examId              Int      @id @default(autoincrement())
  examName            String
  totalQuestions  Int
  correctAnswers  Json
  questionScores  Json
  questionTypes   Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt


  results         ExamResult[] @relation("ExamToExamResult")

  @@map("exam")
}

model ExamResult {
  examResultId         Int      @id @default(autoincrement())
  examId      Int
  studentId   Int
  totalScore  Int
  grade       Int
  results     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  exam        Exam     @relation("ExamToExamResult", fields: [examId], references: [examId], onDelete: Cascade)
  student     Student  @relation("StudentToExamResult", fields: [studentId], references: [memberId], onDelete: Cascade)

  @@map("exam_results")
  @@index([examId])
  @@index([studentId])
}

enum Role {
  DEVELOPER
  ADMIN
  STUDENT
}

enum ReservationStatus {
  PENDING    // 대기중
  CONFIRMED  // 확정
  CANCELLED  // 취소됨
  COMPLETED  // 완료
}